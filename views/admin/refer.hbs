<script>

// When user uploads the image this event will get triggered
input1.addEventListener('change', () => {
// Getting image file object from the input variable
const img_data1 = input1.files[0]
// createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
// The new object URL represents the specified File object or Blob object.
const url1 = URL.createObjectURL(img_data1)
// Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url
created before.
imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
// Storing that cropping view image in a variable
const image1 = document.getElementById('image1')

// Displaying the image box
document.getElementById('image-box1').style.display = 'block'
// Displaying the Crop buttton
document.getElementById('crop-btn1').style.display = 'block'
// Hiding the Post button
const cropper1 = new Cropper(image1, {
autoCropArea: 1,
viewMode: 1,
scalable: false,
zoomable: false,
movable: false,
minCropBoxWidth: 50,
minCropBoxHeight: 50,
})
// When crop button is clicked this event will get triggered
crop_btn1.addEventListener('click', () => {
// This method coverts the selected cropped image on the cropper canvas into a blob object
cropper1.getCroppedCanvas().toBlob((blob) => {
// Gets the original image data
let fileInputElement1 = document.getElementById('id_image1');
// Make a new cropped image file using that blob object, image_data.name will make the new file name same as original
image
let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
// Create a new container
let container1 = new DataTransfer();
// Add the cropped image file to the container
container1.items.add(file1);
// Replace the original image file with the new cropped image file
fileInputElement1.files = container1.files;
document.getElementById('imgView1').src= URL.createObjectURL(fileInputElement1.files[0])
// Hide the cropper box
document.getElementById('image-box1').style.display = 'none'
// Hide the crop button
document.getElementById('crop-btn1').style.display = 'none'
})
})
})

</script>


<script>
  {{!-- image-1 --}}
  const imagebox1 = document.getElementById('image-box1')
  const crop_btn1 = document.getElementById('crop-btn1')
  const input1 = document.getElementById('id_image1')
   function viewImage1(event){
     

var fileInput = document.getElementById('id_image1');

var filePath = fileInput.value;
var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
if (!allowedExtensions.exec(filePath)) {
  fileInput.value = '';
  swal("There is a problem!", "Please choose image file.");
  return false;
}else{
        document.getElementById('imgView1').src=URL.createObjectURL(event.target.files[0])

}
        
    }

    
  // When user uploads the image this event will get triggered
  input1.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data1 = input1.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url1 = URL.createObjectURL(img_data1)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image1 = document.getElementById('image1')
    
    // Displaying the image box
    document.getElementById('image-box1').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn1').style.display = 'block'
    // Hiding the Post button
    const cropper1 = new Cropper(image1, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    })
    // When crop button is clicked this event will get triggered
    crop_btn1.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper1.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement1 = document.getElementById('id_image1');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container1 = new DataTransfer();
        // Add the cropped image file to the container
        container1.items.add(file1);
        // Replace the original image file with the new cropped image file
        fileInputElement1.files = container1.files;
        document.getElementById('imgView1').src= URL.createObjectURL(fileInputElement1.files[0])
        // Hide the cropper box
        document.getElementById('image-box1').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn1').style.display = 'none'
      })
    })
  })



<div class="mb-3  col-lg-3 mt-4">
  <img src="" id="imgView1" alt="" style="width:100px">
  <input type="file" id="id_image1" name="Image" accept="image/*" onchange="viewImage1(event)"><br>
  <div class="vald-info" id="info"></div>
  <h5 class="error_form text-danger" id="image1_error_message"></h5>
  <div id="image-box1" class="image-container" style="width:30vw"></div>
  <button class="btn btn-outline-info" id="crop-btn1" style="width: 100%; margin-top: 10px; display: none;"
    type="button">Crop</button>
</div>




<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>



<section>
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-6">
                <h2 class="text-centre">Add Product</h2>
                <form action="/admin/add-product" method="post" enctype="multipart/form-data" >
                    <label for="">Name</label>
                    <input type="text" name="Name" class="form-control">

                    <label for="">Category</label>
                    <select name="Category" class="form-select" aria-label="Default select example">
  <option value="{{this.Category1}}">Select</option>
  {{#each Category}}
  <option value="{{this.Category1}}">{{this.Category1}}</option>
  {{/each}}
</select>
                    <label for="">Price</label>
                    <input type="text" name="Price" class="form-control">
                    <label for="">Description</label>
                    <input type="text" name="Description" class="form-control">
                    <label for="">Image</label>
                    <input type="file" class="form-control" name="Image">

                    <button type="submit" class="btn btn-success mt-4">Submit</button>


                </form>

            </div>

        </div>

    </div>
</section>